/*
 * Ember API
 *
 * Comprehensive specifications for all Ember API endpoints, incorporating the complete set of DeFi capabilities.
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddLiquidityRequest {
    #[serde(rename = "fromAddress")]
    pub from_address: String,
    #[serde(rename = "protocol")]
    pub protocol: String,
    #[serde(rename = "poolAddress")]
    pub pool_address: String,
    #[serde(rename = "token0")]
    pub token0: Box<models::AddLiquidityRequestToken0>,
    #[serde(rename = "token1")]
    pub token1: Box<models::AddLiquidityRequestToken1>,
    #[serde(rename = "feeTier")]
    pub fee_tier: i32,
    #[serde(rename = "tickLower")]
    pub tick_lower: i32,
    #[serde(rename = "tickUpper")]
    pub tick_upper: i32,
    #[serde(rename = "maxFee")]
    pub max_fee: String,
}

impl AddLiquidityRequest {
    pub fn new(from_address: String, protocol: String, pool_address: String, token0: models::AddLiquidityRequestToken0, token1: models::AddLiquidityRequestToken1, fee_tier: i32, tick_lower: i32, tick_upper: i32, max_fee: String) -> AddLiquidityRequest {
        AddLiquidityRequest {
            from_address,
            protocol,
            pool_address,
            token0: Box::new(token0),
            token1: Box::new(token1),
            fee_tier,
            tick_lower,
            tick_upper,
            max_fee,
        }
    }
}

