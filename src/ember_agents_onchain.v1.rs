// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chain {
    #[prost(string, tag = "1")]
    pub chain_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ChainType", tag = "2")]
    pub r#type: i32,
    #[prost(string, tag = "3")]
    pub icon_uri: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub native_token: ::core::option::Option<Token>,
    #[prost(string, tag = "5")]
    pub http_rpc_url: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "7")]
    pub block_explorer_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Timestamps
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Token {
    /// For native tokens, this may be empty.
    #[prost(string, tag = "1")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub is_native: bool,
    #[prost(int32, tag = "5")]
    pub decimals: i32,
    #[prost(string, tag = "6")]
    pub chain_id: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub icon_uri: ::prost::alloc::string::String,
    /// Store as a string to avoid floating-point precision issues.
    /// e.g., "123.456789"
    #[prost(string, tag = "8")]
    pub usd_price: ::prost::alloc::string::String,
    #[prost(bool, tag = "9")]
    pub is_vetted: bool,
    /// Timestamps
    #[prost(message, optional, tag = "10")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "11")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// Request to get chains, with optional filtering/pagination.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChainsRequest {
    #[prost(string, tag = "1")]
    pub filter: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChainsResponse {
    #[prost(message, repeated, tag = "1")]
    pub chains: ::prost::alloc::vec::Vec<Chain>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request to get tokens, with optional filter by chain_id, plus pagination.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokensRequest {
    /// If empty, returns tokens across all chains.
    #[prost(string, tag = "1")]
    pub chain_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub filter: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub page_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokensResponse {
    #[prost(message, repeated, tag = "1")]
    pub tokens: ::prost::alloc::vec::Vec<Token>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Chain type enum
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChainType {
    Unspecified = 0,
    Evm = 1,
    Solana = 2,
}
impl ChainType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "CHAIN_TYPE_UNSPECIFIED",
            Self::Evm => "CHAIN_TYPE_EVM",
            Self::Solana => "CHAIN_TYPE_SOLANA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAIN_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CHAIN_TYPE_EVM" => Some(Self::Evm),
            "CHAIN_TYPE_SOLANA" => Some(Self::Solana),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod data_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The DataService provides information about chains and tokens.
    ///
    /// Possible gRPC error codes for these methods:
    /// - INVALID_ARGUMENT: The request parameters are malformed or invalid.
    /// - NOT_FOUND: The requested resource(s) could not be found.
    /// - INTERNAL: An unexpected server-side error occurred.
    /// - UNAUTHENTICATED / PERMISSION_DENIED: If authentication or authorization
    /// fails.
    ///
    #[derive(Debug, Clone)]
    pub struct DataServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DataServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DataServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DataServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            DataServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns a list of supported chains.
        /// Error codes:
        ///   - INVALID_ARGUMENT if filtering or pagination parameters are invalid.
        ///   - INTERNAL for server-side issues.
        pub async fn get_chains(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChainsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetChainsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ember_agents_onchain.v1.DataService/GetChains",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("ember_agents_onchain.v1.DataService", "GetChains"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns a list of tokens (potentially filtered by chain or other criteria).
        /// Error codes:
        ///   - INVALID_ARGUMENT if filtering or pagination parameters are invalid.
        ///   - NOT_FOUND if no tokens match the request.
        ///   - INTERNAL for server-side issues.
        pub async fn get_tokens(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTokensRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTokensResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ember_agents_onchain.v1.DataService/GetTokens",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("ember_agents_onchain.v1.DataService", "GetTokens"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
